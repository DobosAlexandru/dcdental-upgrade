(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/gallery"],{

/***/ "./source/_assets/js/gallery.js":
/*!**************************************!*\
  !*** ./source/_assets/js/gallery.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function () {\n  var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n    var parseThumbnailElements = function parseThumbnailElements(el) {\n      var thumbElements = el.childNodes,\n          numNodes = thumbElements.length,\n          items = [],\n          el,\n          childElements,\n          thumbnailEl,\n          size,\n          item;\n\n      for (var i = 0; i < numNodes; i++) {\n        el = thumbElements[i]; // include only element nodes \n\n        if (el.nodeType !== 1) {\n          continue;\n        }\n\n        childElements = el.children;\n        size = el.getAttribute('data-size').split('x'); // create slide object\n\n        item = {\n          src: el.getAttribute('href'),\n          w: parseInt(size[0], 10),\n          h: parseInt(size[1], 10),\n          location: el.getAttribute('data-location')\n        };\n        item.el = el; // save link to element for getThumbBoundsFn\n\n        if (childElements.length > 0) {\n          item.msrc = childElements[0].getAttribute('src'); // thumbnail url\n\n          if (childElements.length > 1) {\n            item.title = childElements[1].innerHTML; // caption (contents of figure)\n          }\n        }\n\n        var mediumSrc = el.getAttribute('data-med');\n\n        if (mediumSrc) {\n          size = el.getAttribute('data-med-size').split('x'); // \"medium-sized\" image\n\n          item.m = {\n            src: mediumSrc,\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10)\n          };\n        } // original image\n\n\n        item.o = {\n          src: item.src,\n          w: item.w,\n          h: item.h\n        };\n        items.push(item);\n      }\n\n      return items;\n    }; // find nearest parent element\n\n\n    var closest = function closest(el, fn) {\n      return el && (fn(el) ? el : closest(el.parentNode, fn));\n    };\n\n    var onThumbnailsClick = function onThumbnailsClick(e) {\n      e = e || window.event;\n      e.preventDefault ? e.preventDefault() : e.returnValue = false;\n      var eTarget = e.target || e.srcElement;\n      var clickedListItem = closest(eTarget, function (el) {\n        return el.tagName === 'A';\n      });\n\n      if (!clickedListItem) {\n        return;\n      }\n\n      var clickedGallery = clickedListItem.parentNode;\n      var childNodes = clickedListItem.parentNode.childNodes,\n          numChildNodes = childNodes.length,\n          nodeIndex = 0,\n          index;\n\n      for (var i = 0; i < numChildNodes; i++) {\n        if (childNodes[i].nodeType !== 1) {\n          continue;\n        }\n\n        if (childNodes[i] === clickedListItem) {\n          index = nodeIndex;\n          break;\n        }\n\n        nodeIndex++;\n      }\n\n      if (index >= 0) {\n        openPhotoSwipe(index, clickedGallery);\n      }\n\n      return false;\n    };\n\n    var photoswipeParseHash = function photoswipeParseHash() {\n      var hash = window.location.hash.substring(1),\n          params = {};\n\n      if (hash.length < 5) {\n        // pid=1\n        return params;\n      }\n\n      var vars = hash.split('&');\n\n      for (var i = 0; i < vars.length; i++) {\n        if (!vars[i]) {\n          continue;\n        }\n\n        var pair = vars[i].split('=');\n\n        if (pair.length < 2) {\n          continue;\n        }\n\n        params[pair[0]] = pair[1];\n      }\n\n      if (params.gid) {\n        params.gid = parseInt(params.gid, 10);\n      }\n\n      return params;\n    };\n\n    var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n      var pswpElement = document.querySelectorAll('.pswp')[0],\n          gallery,\n          options,\n          items;\n      items = parseThumbnailElements(galleryElement); // define options (if needed)\n\n      options = {\n        galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n        getThumbBoundsFn: function getThumbBoundsFn(index) {\n          // See Options->getThumbBoundsFn section of docs for more info\n          var thumbnail = items[index].el.children[0],\n              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n              rect = thumbnail.getBoundingClientRect();\n          return {\n            x: rect.left,\n            y: rect.top + pageYScroll,\n            w: rect.width\n          };\n        },\n        addCaptionHTMLFn: function addCaptionHTMLFn(item, captionEl, isFake) {\n          if (!item.title) {\n            captionEl.children[0].innerText = '';\n            return false;\n          }\n\n          captionEl.children[0].innerHTML = item.title + '<br/><small>Photo: ' + item.location + '</small>';\n          return true;\n        }\n      };\n\n      if (fromURL) {\n        if (options.galleryPIDs) {\n          // parse real index when custom PIDs are used \n          // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n          for (var j = 0; j < items.length; j++) {\n            if (items[j].pid == index) {\n              options.index = j;\n              break;\n            }\n          }\n        } else {\n          options.index = parseInt(index, 10) - 1;\n        }\n      } else {\n        options.index = parseInt(index, 10);\n      } // exit if index not found\n\n\n      if (isNaN(options.index)) {\n        return;\n      }\n\n      var radios = document.getElementsByName('gallery-style');\n\n      for (var i = 0, length = radios.length; i < length; i++) {\n        if (radios[i].checked) {\n          if (radios[i].id == 'radio-all-controls') {} else if (radios[i].id == 'radio-minimal-black') {\n            options.mainClass = 'pswp--minimal--dark';\n            options.barsSize = {\n              top: 0,\n              bottom: 0\n            };\n            options.captionEl = false;\n            options.fullscreenEl = false;\n            options.shareEl = false;\n            options.bgOpacity = 0.85;\n            options.tapToClose = true;\n            options.tapToToggleControls = false;\n          }\n\n          break;\n        }\n      }\n\n      if (disableAnimation) {\n        options.showAnimationDuration = 0;\n      } // Pass data to PhotoSwipe and initialize it\n\n\n      gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options); // see: http://photoswipe.com/documentation/responsive-images.html\n\n      var realViewportWidth,\n          useLargeImages = false,\n          firstResize = true,\n          imageSrcWillChange;\n      gallery.listen('beforeResize', function () {\n        var dpiRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;\n        dpiRatio = Math.min(dpiRatio, 2.5);\n        realViewportWidth = gallery.viewportSize.x * dpiRatio;\n\n        if (realViewportWidth >= 1200 || !gallery.likelyTouchDevice && realViewportWidth > 800 || screen.width > 1200) {\n          if (!useLargeImages) {\n            useLargeImages = true;\n            imageSrcWillChange = true;\n          }\n        } else {\n          if (useLargeImages) {\n            useLargeImages = false;\n            imageSrcWillChange = true;\n          }\n        }\n\n        if (imageSrcWillChange && !firstResize) {\n          gallery.invalidateCurrItems();\n        }\n\n        if (firstResize) {\n          firstResize = false;\n        }\n\n        imageSrcWillChange = false;\n      });\n      gallery.listen('gettingData', function (index, item) {\n        if (useLargeImages) {\n          item.src = item.o.src;\n          item.w = item.o.w;\n          item.h = item.o.h;\n        } else {\n          item.src = item.m.src;\n          item.w = item.m.w;\n          item.h = item.m.h;\n        }\n      });\n      gallery.init();\n    }; // select all gallery elements\n\n\n    var galleryElements = document.querySelectorAll(gallerySelector);\n\n    for (var i = 0, l = galleryElements.length; i < l; i++) {\n      galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n      galleryElements[i].onclick = onThumbnailsClick;\n    } // Parse URL and open gallery if it contains #&pid=3&gid=1\n\n\n    var hashData = photoswipeParseHash();\n\n    if (hashData.pid && hashData.gid) {\n      openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n    }\n  };\n\n  initPhotoSwipeFromDOM('.demo-gallery');\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source/_assets/js/gallery.js\n");

/***/ }),

/***/ "./source/_assets/sass/main.scss":
/*!***************************************!*\
  !*** ./source/_assets/sass/main.scss ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvX2Fzc2V0cy9zYXNzL21haW4uc2Nzcz85Y2YxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc291cmNlL19hc3NldHMvc2Fzcy9tYWluLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./source/_assets/sass/main.scss\n");

/***/ }),

/***/ 0:
/*!****************************************************************************!*\
  !*** multi ./source/_assets/js/gallery.js ./source/_assets/sass/main.scss ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/adrians/cromatic/proiecte/dc-dental/source/_assets/js/gallery.js */"./source/_assets/js/gallery.js");
module.exports = __webpack_require__(/*! /Users/adrians/cromatic/proiecte/dc-dental/source/_assets/sass/main.scss */"./source/_assets/sass/main.scss");


/***/ })

},[[0,"/js/manifest"]]]);